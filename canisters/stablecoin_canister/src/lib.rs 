use ic_cdk_macros::*;
use ic_cdk::api::caller;
use candid::{CandidType, Deserialize, Principal};
use std::collections::HashMap;
use std::cell::RefCell;

#[derive(CandidType, Deserialize, Clone)]
struct Account {
    owner: Principal,
    balance: u64,
}

thread_local! {
    static BALANCES: RefCell<HashMap<Principal, u64>> = RefCell::new(HashMap::new());
}

const TOKEN_NAME: &str = "Synthetic USD";
const TOKEN_SYMBOL: &str = "SynUSD";
const TOKEN_DECIMALS: u8 = 2;

#[query]
fn get_token_info() -> (String, String, u8) {
    (TOKEN_NAME.to_string(), TOKEN_SYMBOL.to_string(), TOKEN_DECIMALS)
}

#[query]
fn balance_of(user: Principal) -> u64 {
    BALANCES.with(|b| *b.borrow().get(&user).unwrap_or(&0))
}

#[update]
fn mint(to: Principal, amount: u64) -> String {
    BALANCES.with(|b| {
        let mut map = b.borrow_mut();
        let entry = map.entry(to).or_insert(0);
        *entry += amount;
    });

    format!("Minted {} SynUSD to {}", amount, to.to_text())
}

#[update]
fn burn(from: Principal, amount: u64) -> String {
    BALANCES.with(|b| {
        let mut map = b.borrow_mut();
        let entry = map.entry(from).or_insert(0);

        if *entry < amount {
            return format!("Insufficient balance. Has {}, tried to burn {}", *entry, amount);
        }

        *entry -= amount;
        format!("Burned {} SynUSD from {}", amount, from.to_text())
    })
}
